/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

'use strict'

function peg$subclass (child, parent) {
  function ctor () { this.constructor = child }
  ctor.prototype = parent.prototype
  child.prototype = new ctor()
}

function peg$SyntaxError (message, expected, found, location) {
  this.message = message
  this.expected = expected
  this.found = found
  this.location = location
  this.name = 'SyntaxError'

  if (typeof Error.captureStackTrace === 'function') {
    Error.captureStackTrace(this, peg$SyntaxError)
  }
}

peg$subclass(peg$SyntaxError, Error)

peg$SyntaxError.buildMessage = function (expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function (expectation) {
      return '"' + literalEscape(expectation.text) + '"'
    },

    'class': function (expectation) {
      var escapedParts = ''

      var i

      for (i = 0; i < expectation.parts.length; i++) {
        escapedParts += expectation.parts[i] instanceof Array
          ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
          : classEscape(expectation.parts[i])
      }

      return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']'
    },

    any: function (expectation) {
      return 'any character'
    },

    end: function (expectation) {
      return 'end of input'
    },

    other: function (expectation) {
      return expectation.description
    }
  }

  function hex (ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase()
  }

  function literalEscape (s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch) })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch) })
  }

  function classEscape (s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g, '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch) })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch) })
  }

  function describeExpectation (expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
  }

  function describeExpected (expected) {
    var descriptions = new Array(expected.length)

    var i; var j

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i])
    }

    descriptions.sort()

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i]
          j++
        }
      }
      descriptions.length = j
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0]

      case 2:
        return descriptions[0] + ' or ' + descriptions[1]

      default:
        return descriptions.slice(0, -1).join(', ') +
          ', or ' +
          descriptions[descriptions.length - 1]
    }
  }

  function describeFound (found) {
    return found ? '"' + literalEscape(found) + '"' : 'end of input'
  }

  return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.'
}

function peg$parse (input, options) {
  options = options !== void 0 ? options : {}

  var peg$FAILED = {}

  var peg$startRuleFunctions = { JSON_text: peg$parseJSON_text }

  var peg$startRuleFunction = peg$parseJSON_text

  var peg$c0 = function (value) { return value }

  var peg$c1 = '['

  var peg$c2 = peg$literalExpectation('[', false)

  var peg$c3 = '{'

  var peg$c4 = peg$literalExpectation('{', false)

  var peg$c5 = ']'

  var peg$c6 = peg$literalExpectation(']', false)

  var peg$c7 = '}'

  var peg$c8 = peg$literalExpectation('}', false)

  var peg$c9 = ':'

  var peg$c10 = peg$literalExpectation(':', false)

  var peg$c11 = ','

  var peg$c12 = peg$literalExpectation(',', false)

  var peg$c13 = /^[ \t\n\r]/

  var peg$c14 = peg$classExpectation([' ', '\t', '\n', '\r'], false, false)

  var peg$c15 = '/*'

  var peg$c16 = peg$literalExpectation('/*', false)

  var peg$c17 = /^[^*]/

  var peg$c18 = peg$classExpectation(['*'], true, false)

  var peg$c19 = '*'

  var peg$c20 = peg$literalExpectation('*', false)

  var peg$c21 = /^[^\/*]/

  var peg$c22 = peg$classExpectation(['/', '*'], true, false)

  var peg$c23 = '/'

  var peg$c24 = peg$literalExpectation('/', false)

  var peg$c25 = '//'

  var peg$c26 = peg$literalExpectation('//', false)

  var peg$c27 = /^[^\n]/

  var peg$c28 = peg$classExpectation(['\n'], true, false)

  var peg$c29 = peg$otherExpectation('whitespace')

  var peg$c30 = 'false'

  var peg$c31 = peg$literalExpectation('false', false)

  var peg$c32 = function () { return false }

  var peg$c33 = 'null'

  var peg$c34 = peg$literalExpectation('null', false)

  var peg$c35 = function () { return null }

  var peg$c36 = 'true'

  var peg$c37 = peg$literalExpectation('true', false)

  var peg$c38 = function () { return true }

  var peg$c39 = function (head, m) { return m }

  var peg$c40 = function (head, tail) {
    var result = {};

    [head].concat(tail).forEach(function (element) {
      result[element.name] = element.value
    })

    return result
  }

  var peg$c41 = function (members) { return members !== null ? members : {} }

  var peg$c42 = function (name, value) {
    return { name: name, value: value }
  }

  var peg$c43 = function (head, v) { return v }

  var peg$c44 = function (head, tail) { return [head].concat(tail) }

  var peg$c45 = function (values) { return values !== null ? values : [] }

  var peg$c46 = peg$otherExpectation('number')

  var peg$c47 = function () { return parseFloat(text()) }

  var peg$c48 = '.'

  var peg$c49 = peg$literalExpectation('.', false)

  var peg$c50 = /^[1-9]/

  var peg$c51 = peg$classExpectation([['1', '9']], false, false)

  var peg$c52 = /^[eE]/

  var peg$c53 = peg$classExpectation(['e', 'E'], false, false)

  var peg$c54 = '-'

  var peg$c55 = peg$literalExpectation('-', false)

  var peg$c56 = '+'

  var peg$c57 = peg$literalExpectation('+', false)

  var peg$c58 = '0'

  var peg$c59 = peg$literalExpectation('0', false)

  var peg$c60 = peg$otherExpectation('string')

  var peg$c61 = function (chars) { return chars.join('') }

  var peg$c62 = '"'

  var peg$c63 = peg$literalExpectation('"', false)

  var peg$c64 = "'"

  var peg$c65 = peg$literalExpectation("'", false)

  var peg$c66 = '\\'

  var peg$c67 = peg$literalExpectation('\\', false)

  var peg$c68 = 'b'

  var peg$c69 = peg$literalExpectation('b', false)

  var peg$c70 = function () { return '\b' }

  var peg$c71 = 'f'

  var peg$c72 = peg$literalExpectation('f', false)

  var peg$c73 = function () { return '\f' }

  var peg$c74 = 'n'

  var peg$c75 = peg$literalExpectation('n', false)

  var peg$c76 = function () { return '\n' }

  var peg$c77 = 'r'

  var peg$c78 = peg$literalExpectation('r', false)

  var peg$c79 = function () { return '\r' }

  var peg$c80 = 't'

  var peg$c81 = peg$literalExpectation('t', false)

  var peg$c82 = function () { return '\t' }

  var peg$c83 = 'u'

  var peg$c84 = peg$literalExpectation('u', false)

  var peg$c85 = function (digits) {
    return String.fromCharCode(parseInt(digits, 16))
  }

  var peg$c86 = function (sequence) { return sequence }

  var peg$c87 = /^[^\0-\x1F"\\]/

  var peg$c88 = peg$classExpectation([['\0', '\x1F'], '"', '\\'], true, false)

  var peg$c89 = function (chars) { return chars.join('') }

  var peg$c90 = /^[^\0-\x1F'\\]/

  var peg$c91 = peg$classExpectation([['\0', '\x1F'], "'", '\\'], true, false)

  var peg$c92 = /^[0-9]/

  var peg$c93 = peg$classExpectation([['0', '9']], false, false)

  var peg$c94 = /^[0-9a-f]/i

  var peg$c95 = peg$classExpectation([['0', '9'], ['a', 'f']], false, true)

  var peg$currPos = 0

  var peg$savedPos = 0

  var peg$posDetailsCache = [{ line: 1, column: 1 }]

  var peg$maxFailPos = 0

  var peg$maxFailExpected = []

  var peg$silentFails = 0

  var peg$result

  if ('startRule' in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + '".')
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
  }

  function text () {
    return input.substring(peg$savedPos, peg$currPos)
  }

  function location () {
    return peg$computeLocation(peg$savedPos, peg$currPos)
  }

  function expected (description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    )
  }

  function error (message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location)
  }

  function peg$literalExpectation (text, ignoreCase) {
    return { type: 'literal', text: text, ignoreCase: ignoreCase }
  }

  function peg$classExpectation (parts, inverted, ignoreCase) {
    return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase }
  }

  function peg$anyExpectation () {
    return { type: 'any' }
  }

  function peg$endExpectation () {
    return { type: 'end' }
  }

  function peg$otherExpectation (description) {
    return { type: 'other', description: description }
  }

  function peg$computePosDetails (pos) {
    var details = peg$posDetailsCache[pos]; var p

    if (details) {
      return details
    } else {
      p = pos - 1
      while (!peg$posDetailsCache[p]) {
        p--
      }

      details = peg$posDetailsCache[p]
      details = {
        line: details.line,
        column: details.column
      }

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++
          details.column = 1
        } else {
          details.column++
        }

        p++
      }

      peg$posDetailsCache[pos] = details
      return details
    }
  }

  function peg$computeLocation (startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos)

    var endPosDetails = peg$computePosDetails(endPos)

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    }
  }

  function peg$fail (expected) {
    if (peg$currPos < peg$maxFailPos) { return }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos
      peg$maxFailExpected = []
    }

    peg$maxFailExpected.push(expected)
  }

  function peg$buildSimpleError (message, location) {
    return new peg$SyntaxError(message, null, null, location)
  }

  function peg$buildStructuredError (expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    )
  }

  function peg$parseJSON_text () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsews()
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalue()
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c0(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsebegin_array () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsews()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c1
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c2) }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsebegin_object () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsews()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c3
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c4) }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseend_array () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsews()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c5
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c6) }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseend_object () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsews()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 125) {
        s2 = peg$c7
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c8) }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsename_separator () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsews()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c9
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c10) }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsevalue_separator () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsews()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c11
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c12) }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsespace () {
    var s0, s1

    s0 = []
    if (peg$c13.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c14) }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1)
        if (peg$c13.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c14) }
        }
      }
    } else {
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsecomment () {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

    s0 = peg$currPos
    if (input.substr(peg$currPos, 2) === peg$c15) {
      s1 = peg$c15
      peg$currPos += 2
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c16) }
    }
    if (s1 !== peg$FAILED) {
      s2 = []
      if (peg$c17.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c18) }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        if (peg$c17.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c18) }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = []
        if (input.charCodeAt(peg$currPos) === 42) {
          s4 = peg$c19
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c20) }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4)
            if (input.charCodeAt(peg$currPos) === 42) {
              s4 = peg$c19
              peg$currPos++
            } else {
              s4 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c20) }
            }
          }
        } else {
          s3 = peg$FAILED
        }
        if (s3 !== peg$FAILED) {
          s4 = []
          s5 = peg$currPos
          if (peg$c21.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s6 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c22) }
          }
          if (s6 !== peg$FAILED) {
            s7 = []
            if (peg$c17.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s8 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c18) }
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8)
              if (peg$c17.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s8 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c18) }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = []
              if (input.charCodeAt(peg$currPos) === 42) {
                s9 = peg$c19
                peg$currPos++
              } else {
                s9 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c20) }
              }
              if (s9 !== peg$FAILED) {
                while (s9 !== peg$FAILED) {
                  s8.push(s9)
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s9 = peg$c19
                    peg$currPos++
                  } else {
                    s9 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c20) }
                  }
                }
              } else {
                s8 = peg$FAILED
              }
              if (s8 !== peg$FAILED) {
                s6 = [s6, s7, s8]
                s5 = s6
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5)
            s5 = peg$currPos
            if (peg$c21.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s6 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c22) }
            }
            if (s6 !== peg$FAILED) {
              s7 = []
              if (peg$c17.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s8 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c18) }
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8)
                if (peg$c17.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos)
                  peg$currPos++
                } else {
                  s8 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c18) }
                }
              }
              if (s7 !== peg$FAILED) {
                s8 = []
                if (input.charCodeAt(peg$currPos) === 42) {
                  s9 = peg$c19
                  peg$currPos++
                } else {
                  s9 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c20) }
                }
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9)
                    if (input.charCodeAt(peg$currPos) === 42) {
                      s9 = peg$c19
                      peg$currPos++
                    } else {
                      s9 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c20) }
                    }
                  }
                } else {
                  s8 = peg$FAILED
                }
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8]
                  s5 = s6
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s5 = peg$c23
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c24) }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5]
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsesingleline_comment () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    if (input.substr(peg$currPos, 2) === peg$c25) {
      s1 = peg$c25
      peg$currPos += 2
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c26) }
    }
    if (s1 !== peg$FAILED) {
      s2 = []
      if (peg$c27.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c28) }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        if (peg$c27.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c28) }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2]
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsews () {
    var s0, s1

    peg$silentFails++
    s0 = []
    s1 = peg$parsespace()
    if (s1 === peg$FAILED) {
      s1 = peg$parsecomment()
      if (s1 === peg$FAILED) {
        s1 = peg$parsesingleline_comment()
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1)
      s1 = peg$parsespace()
      if (s1 === peg$FAILED) {
        s1 = peg$parsecomment()
        if (s1 === peg$FAILED) {
          s1 = peg$parsesingleline_comment()
        }
      }
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c29) }
    }

    return s0
  }

  function peg$parsevalue () {
    var s0

    s0 = peg$parsefalse()
    if (s0 === peg$FAILED) {
      s0 = peg$parsenull()
      if (s0 === peg$FAILED) {
        s0 = peg$parsetrue()
        if (s0 === peg$FAILED) {
          s0 = peg$parseobject()
          if (s0 === peg$FAILED) {
            s0 = peg$parsearray()
            if (s0 === peg$FAILED) {
              s0 = peg$parsenumber()
              if (s0 === peg$FAILED) {
                s0 = peg$parsestring()
              }
            }
          }
        }
      }
    }

    return s0
  }

  function peg$parsefalse () {
    var s0, s1

    s0 = peg$currPos
    if (input.substr(peg$currPos, 5) === peg$c30) {
      s1 = peg$c30
      peg$currPos += 5
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c31) }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c32()
    }
    s0 = s1

    return s0
  }

  function peg$parsenull () {
    var s0, s1

    s0 = peg$currPos
    if (input.substr(peg$currPos, 4) === peg$c33) {
      s1 = peg$c33
      peg$currPos += 4
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c34) }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c35()
    }
    s0 = s1

    return s0
  }

  function peg$parsetrue () {
    var s0, s1

    s0 = peg$currPos
    if (input.substr(peg$currPos, 4) === peg$c36) {
      s1 = peg$c36
      peg$currPos += 4
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c37) }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c38()
    }
    s0 = s1

    return s0
  }

  function peg$parseobject () {
    var s0, s1, s2, s3, s4, s5, s6, s7

    s0 = peg$currPos
    s1 = peg$parsebegin_object()
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = peg$parsemember()
      if (s3 !== peg$FAILED) {
        s4 = []
        s5 = peg$currPos
        s6 = peg$parsevalue_separator()
        if (s6 !== peg$FAILED) {
          s7 = peg$parsemember()
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5
            s6 = peg$c39(s3, s7)
            s5 = s6
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
        } else {
          peg$currPos = s5
          s5 = peg$FAILED
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5)
          s5 = peg$currPos
          s6 = peg$parsevalue_separator()
          if (s6 !== peg$FAILED) {
            s7 = peg$parsemember()
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5
              s6 = peg$c39(s3, s7)
              s5 = s6
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2
          s3 = peg$c40(s3, s4)
          s2 = s3
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
      if (s2 === peg$FAILED) {
        s2 = null
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_object()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c41(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsemember () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsestring()
    if (s1 !== peg$FAILED) {
      s2 = peg$parsename_separator()
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevalue()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c42(s1, s3)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsearray () {
    var s0, s1, s2, s3, s4, s5, s6, s7

    s0 = peg$currPos
    s1 = peg$parsebegin_array()
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = peg$parsevalue()
      if (s3 !== peg$FAILED) {
        s4 = []
        s5 = peg$currPos
        s6 = peg$parsevalue_separator()
        if (s6 !== peg$FAILED) {
          s7 = peg$parsevalue()
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5
            s6 = peg$c43(s3, s7)
            s5 = s6
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
        } else {
          peg$currPos = s5
          s5 = peg$FAILED
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5)
          s5 = peg$currPos
          s6 = peg$parsevalue_separator()
          if (s6 !== peg$FAILED) {
            s7 = peg$parsevalue()
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5
              s6 = peg$c43(s3, s7)
              s5 = s6
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2
          s3 = peg$c44(s3, s4)
          s2 = s3
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
      if (s2 === peg$FAILED) {
        s2 = null
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_array()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c45(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsenumber () {
    var s0, s1, s2, s3, s4

    peg$silentFails++
    s0 = peg$currPos
    s1 = peg$parseminus()
    if (s1 === peg$FAILED) {
      s1 = null
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseint()
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefrac()
        if (s3 === peg$FAILED) {
          s3 = null
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexp()
          if (s4 === peg$FAILED) {
            s4 = null
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c47()
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c46) }
    }

    return s0
  }

  function peg$parsedecimal_point () {
    var s0

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c48
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c49) }
    }

    return s0
  }

  function peg$parsedigit1_9 () {
    var s0

    if (peg$c50.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c51) }
    }

    return s0
  }

  function peg$parsee () {
    var s0

    if (peg$c52.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c53) }
    }

    return s0
  }

  function peg$parseexp () {
    var s0, s1, s2, s3, s4

    s0 = peg$currPos
    s1 = peg$parsee()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseminus()
      if (s2 === peg$FAILED) {
        s2 = peg$parseplus()
      }
      if (s2 === peg$FAILED) {
        s2 = null
      }
      if (s2 !== peg$FAILED) {
        s3 = []
        s4 = peg$parseDIGIT()
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4)
            s4 = peg$parseDIGIT()
          }
        } else {
          s3 = peg$FAILED
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsefrac () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsedecimal_point()
    if (s1 !== peg$FAILED) {
      s2 = []
      s3 = peg$parseDIGIT()
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$parseDIGIT()
        }
      } else {
        s2 = peg$FAILED
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2]
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseint () {
    var s0, s1, s2, s3

    s0 = peg$parsezero()
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = peg$parsedigit1_9()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$parseDIGIT()
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$parseDIGIT()
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    }

    return s0
  }

  function peg$parseminus () {
    var s0

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c54
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c55) }
    }

    return s0
  }

  function peg$parseplus () {
    var s0

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c56
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c57) }
    }

    return s0
  }

  function peg$parsezero () {
    var s0

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c58
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c59) }
    }

    return s0
  }

  function peg$parsestring () {
    var s0, s1

    peg$silentFails++
    s0 = peg$parsedoublequoted_string()
    if (s0 === peg$FAILED) {
      s0 = peg$parsesinglequoted_string()
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c60) }
    }

    return s0
  }

  function peg$parsedoublequoted_string () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsequotation_mark()
    if (s1 !== peg$FAILED) {
      s2 = []
      s3 = peg$parsechar()
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        s3 = peg$parsechar()
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c61(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsechar () {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

    s0 = peg$parseunescaped()
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = peg$parseescape()
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c62
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c63) }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c64
            peg$currPos++
          } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c65) }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c66
              peg$currPos++
            } else {
              s2 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c67) }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s2 = peg$c23
                peg$currPos++
              } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c24) }
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos
                if (input.charCodeAt(peg$currPos) === 98) {
                  s3 = peg$c68
                  peg$currPos++
                } else {
                  s3 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c69) }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2
                  s3 = peg$c70()
                }
                s2 = s3
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos
                  if (input.charCodeAt(peg$currPos) === 102) {
                    s3 = peg$c71
                    peg$currPos++
                  } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c72) }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2
                    s3 = peg$c73()
                  }
                  s2 = s3
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos
                    if (input.charCodeAt(peg$currPos) === 110) {
                      s3 = peg$c74
                      peg$currPos++
                    } else {
                      s3 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c75) }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2
                      s3 = peg$c76()
                    }
                    s2 = s3
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos
                      if (input.charCodeAt(peg$currPos) === 114) {
                        s3 = peg$c77
                        peg$currPos++
                      } else {
                        s3 = peg$FAILED
                        if (peg$silentFails === 0) { peg$fail(peg$c78) }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2
                        s3 = peg$c79()
                      }
                      s2 = s3
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos
                        if (input.charCodeAt(peg$currPos) === 116) {
                          s3 = peg$c80
                          peg$currPos++
                        } else {
                          s3 = peg$FAILED
                          if (peg$silentFails === 0) { peg$fail(peg$c81) }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2
                          s3 = peg$c82()
                        }
                        s2 = s3
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos
                          if (input.charCodeAt(peg$currPos) === 117) {
                            s3 = peg$c83
                            peg$currPos++
                          } else {
                            s3 = peg$FAILED
                            if (peg$silentFails === 0) { peg$fail(peg$c84) }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos
                            s5 = peg$currPos
                            s6 = peg$parseHEXDIG()
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseHEXDIG()
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseHEXDIG()
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseHEXDIG()
                                  if (s9 !== peg$FAILED) {
                                    s6 = [s6, s7, s8, s9]
                                    s5 = s6
                                  } else {
                                    peg$currPos = s5
                                    s5 = peg$FAILED
                                  }
                                } else {
                                  peg$currPos = s5
                                  s5 = peg$FAILED
                                }
                              } else {
                                peg$currPos = s5
                                s5 = peg$FAILED
                              }
                            } else {
                              peg$currPos = s5
                              s5 = peg$FAILED
                            }
                            if (s5 !== peg$FAILED) {
                              s4 = input.substring(s4, peg$currPos)
                            } else {
                              s4 = s5
                            }
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s2
                              s3 = peg$c85(s4)
                              s2 = s3
                            } else {
                              peg$currPos = s2
                              s2 = peg$FAILED
                            }
                          } else {
                            peg$currPos = s2
                            s2 = peg$FAILED
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c86(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    }

    return s0
  }

  function peg$parseescape () {
    var s0

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c66
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c67) }
    }

    return s0
  }

  function peg$parsequotation_mark () {
    var s0

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c62
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c63) }
    }

    return s0
  }

  function peg$parseunescaped () {
    var s0

    if (peg$c87.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c88) }
    }

    return s0
  }

  function peg$parsesinglequoted_string () {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parsesingle_quote()
    if (s1 !== peg$FAILED) {
      s2 = []
      s3 = peg$parsesinglequoted_char()
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        s3 = peg$parsesinglequoted_char()
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesingle_quote()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c89(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsesinglequoted_char () {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

    s0 = peg$parsesinglequoted_unescaped()
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = peg$parseescape()
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c64
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c65) }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c62
            peg$currPos++
          } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c63) }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c66
              peg$currPos++
            } else {
              s2 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c67) }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s2 = peg$c23
                peg$currPos++
              } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c24) }
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos
                if (input.charCodeAt(peg$currPos) === 98) {
                  s3 = peg$c68
                  peg$currPos++
                } else {
                  s3 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c69) }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2
                  s3 = peg$c70()
                }
                s2 = s3
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos
                  if (input.charCodeAt(peg$currPos) === 102) {
                    s3 = peg$c71
                    peg$currPos++
                  } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c72) }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2
                    s3 = peg$c73()
                  }
                  s2 = s3
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos
                    if (input.charCodeAt(peg$currPos) === 110) {
                      s3 = peg$c74
                      peg$currPos++
                    } else {
                      s3 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c75) }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2
                      s3 = peg$c76()
                    }
                    s2 = s3
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos
                      if (input.charCodeAt(peg$currPos) === 114) {
                        s3 = peg$c77
                        peg$currPos++
                      } else {
                        s3 = peg$FAILED
                        if (peg$silentFails === 0) { peg$fail(peg$c78) }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2
                        s3 = peg$c79()
                      }
                      s2 = s3
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos
                        if (input.charCodeAt(peg$currPos) === 116) {
                          s3 = peg$c80
                          peg$currPos++
                        } else {
                          s3 = peg$FAILED
                          if (peg$silentFails === 0) { peg$fail(peg$c81) }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2
                          s3 = peg$c82()
                        }
                        s2 = s3
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos
                          if (input.charCodeAt(peg$currPos) === 117) {
                            s3 = peg$c83
                            peg$currPos++
                          } else {
                            s3 = peg$FAILED
                            if (peg$silentFails === 0) { peg$fail(peg$c84) }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos
                            s5 = peg$currPos
                            s6 = peg$parseHEXDIG()
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseHEXDIG()
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseHEXDIG()
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseHEXDIG()
                                  if (s9 !== peg$FAILED) {
                                    s6 = [s6, s7, s8, s9]
                                    s5 = s6
                                  } else {
                                    peg$currPos = s5
                                    s5 = peg$FAILED
                                  }
                                } else {
                                  peg$currPos = s5
                                  s5 = peg$FAILED
                                }
                              } else {
                                peg$currPos = s5
                                s5 = peg$FAILED
                              }
                            } else {
                              peg$currPos = s5
                              s5 = peg$FAILED
                            }
                            if (s5 !== peg$FAILED) {
                              s4 = input.substring(s4, peg$currPos)
                            } else {
                              s4 = s5
                            }
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s2
                              s3 = peg$c85(s4)
                              s2 = s3
                            } else {
                              peg$currPos = s2
                              s2 = peg$FAILED
                            }
                          } else {
                            peg$currPos = s2
                            s2 = peg$FAILED
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c86(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    }

    return s0
  }

  function peg$parsesingle_quote () {
    var s0

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c64
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c65) }
    }

    return s0
  }

  function peg$parsesinglequoted_unescaped () {
    var s0

    if (peg$c90.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c91) }
    }

    return s0
  }

  function peg$parseDIGIT () {
    var s0

    if (peg$c92.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c93) }
    }

    return s0
  }

  function peg$parseHEXDIG () {
    var s0

    if (peg$c94.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c95) }
    }

    return s0
  }

  peg$result = peg$startRuleFunction()

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation())
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    )
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
}
