{"version":3,"sources":["lib/validator.js"],"names":["global","factory","exports","module","jsonlint","require","Ajv","requireSchemaDraft","environment","define","amd","schemaDrafts","self","jsonlintSchemaDrafts","jsonlintValidator","this","compile","schema","options","String","ajv","schemaId","addMetaSchema","Error","validate","parse","mode","ignoreComments","ignoreTrailingCommas","allowSingleQuotedStrings","allowDuplicateObjectKeys","error","message","data","result","errorsText","errors","Object","defineProperty","value"],"mappings":"CAAC,SAAUA,OAAQC,SACjB,UAAWC,UAAY,iBAAmBC,SAAW,YAAa,CAChE,IAAIC,SAAWC,QAAQ,cACvB,IAAIC,IAAMD,QAAQ,OAElB,SAASE,mBAAoBC,aAC3B,OAAOH,QAAQ,gBAAkBG,YAAc,SAEjDP,QAAQC,QAASI,IAAKF,SAAUG,yBAE3B,UAAWE,SAAW,YAAcA,OAAOC,IAAK,CAErDD,OAAO,qBAAsB,CAAC,UAAW,MAAO,WAAY,0BAC1D,SAAUP,QAASE,SAAUE,IAAKK,cAChC,SAASJ,mBAAoBC,aAC3B,OAAOG,aAAaH,aAEtBP,QAAQC,QAASI,IAAKF,SAAUG,0BAE/B,CAELP,OAASA,QAAUY,KACnB,IAAIL,mBAAqB,SAAUC,aACjC,OAAOR,OAAOa,qBAAqBL,cAErCP,QAAQD,OAAOc,kBAAoB,GAAId,OAAOM,IAAKN,OAAOI,SAAUG,sBAzBxE,CA2BEQ,KAAM,SAAUb,QAASI,IAAKF,SAAUG,oBACxC,aAEA,SAASS,QAASC,OAAQT,aACxB,IAAIU,QAAU,GACd,UAAWV,cAAgB,YAAcA,uBAAuBW,QAAS,CACvED,QAAUV,YACVA,YAAcU,QAAQV,YAExB,IAAIY,IACJ,IAAKZ,YAAa,CAChBY,IAAM,IAAId,IAAI,CAAEe,SAAU,SAC1BD,IAAIE,cAAcf,mBAAmB,yBACrCa,IAAIE,cAAcf,mBAAmB,8BAChC,GAAIC,cAAgB,uBAAwB,CACjDY,IAAM,IAAId,SACL,GAAIE,cAAgB,uBAAwB,CACjDY,IAAM,IAAId,IACVc,IAAIE,cAAcf,mBAAmB,8BAChC,GAAIC,cAAgB,uBAAwB,CACjDY,IAAM,IAAId,IAAI,CAAEe,SAAU,OAC1BD,IAAIE,cAAcf,mBAAmB,6BAChC,CACL,MAAM,IAAIgB,MAAM,4DACdf,YAAc,MAElB,IAAIgB,SACJ,IACEP,OAASb,SAASqB,MAAMR,OAAQ,CAC9BS,KAAMR,QAAQQ,KACdC,eAAgBT,QAAQS,eACxBC,qBAAsBV,QAAQU,qBAC9BC,yBAA0BX,QAAQW,yBAClCC,yBAA0BZ,QAAQY,2BAEpCN,SAAWJ,IAAIJ,QAAQC,QACvB,MAAOc,OACP,MAAM,IAAIR,MAAM,sCAAwCQ,MAAMC,SAEhE,OAAO,SAAUC,MACf,IAAIC,OAASV,SAASS,MACtB,IAAKC,OAAQ,CACX,IAAIF,QAAUZ,IAAIe,WAAWX,SAASY,QACtC,MAAM,IAAIb,MAAMS,WAKtB9B,QAAQc,QAAUA,QAElBqB,OAAOC,eAAepC,QAAS,aAAc,CAAEqC,MAAO","file":"validator.js","sourcesContent":["(function (global, factory) {\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    var jsonlint = require('./jsonlint')\n    var Ajv = require('ajv')\n    // eslint-disable-next-line no-inner-declarations\n    function requireSchemaDraft (environment) {\n      return require('ajv/lib/refs/' + environment + '.json')\n    }\n    factory(exports, Ajv, jsonlint, requireSchemaDraft)\n    // eslint-disable-next-line no-undef\n  } else if (typeof define === 'function' && define.amd) {\n    // eslint-disable-next-line no-undef\n    define('jsonlint-validator', ['exports', 'ajv', 'jsonlint', 'jsonlint-schema-drafts'],\n      function (exports, jsonlint, Ajv, schemaDrafts) {\n        function requireSchemaDraft (environment) {\n          return schemaDrafts[environment]\n        }\n        factory(exports, Ajv, jsonlint, requireSchemaDraft)\n      })\n  } else {\n    // eslint-disable-next-line no-undef\n    global = global || self\n    var requireSchemaDraft = function (environment) {\n      return global.jsonlintSchemaDrafts[environment]\n    }\n    factory(global.jsonlintValidator = {}, global.Ajv, global.jsonlint, requireSchemaDraft)\n  }\n}(this, function (exports, Ajv, jsonlint, requireSchemaDraft) {\n  'use strict'\n\n  function compile (schema, environment) {\n    var options = {}\n    if (typeof environment === 'object' && !(environment instanceof String)) {\n      options = environment\n      environment = options.environment\n    }\n    var ajv\n    if (!environment) {\n      ajv = new Ajv({ schemaId: 'auto' })\n      ajv.addMetaSchema(requireSchemaDraft('json-schema-draft-04'))\n      ajv.addMetaSchema(requireSchemaDraft('json-schema-draft-06'))\n    } else if (environment === 'json-schema-draft-07') {\n      ajv = new Ajv()\n    } else if (environment === 'json-schema-draft-06') {\n      ajv = new Ajv()\n      ajv.addMetaSchema(requireSchemaDraft('json-schema-draft-06'))\n    } else if (environment === 'json-schema-draft-04') {\n      ajv = new Ajv({ schemaId: 'id' })\n      ajv.addMetaSchema(requireSchemaDraft('json-schema-draft-04'))\n    } else {\n      throw new Error('Unsupported environment for the JSON schema validation: \"' +\n        environment + '\".')\n    }\n    var validate\n    try {\n      schema = jsonlint.parse(schema, {\n        mode: options.mode,\n        ignoreComments: options.ignoreComments,\n        ignoreTrailingCommas: options.ignoreTrailingCommas,\n        allowSingleQuotedStrings: options.allowSingleQuotedStrings,\n        allowDuplicateObjectKeys: options.allowDuplicateObjectKeys\n      })\n      validate = ajv.compile(schema)\n    } catch (error) {\n      throw new Error('Compiling the JSON schema failed.\\n' + error.message)\n    }\n    return function (data) {\n      var result = validate(data)\n      if (!result) {\n        var message = ajv.errorsText(validate.errors)\n        throw new Error(message)\n      }\n    }\n  }\n\n  exports.compile = compile\n\n  Object.defineProperty(exports, '__esModule', { value: true })\n}))\n"]}